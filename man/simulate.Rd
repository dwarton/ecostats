% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.lm.R
\name{simulate}
\alias{simulate}
\title{Simulate Responses}
\usage{
simulate(object, nsim = 1, seed = NULL, ...)
}
\arguments{
\item{object}{an object representing a fitted model.}

\item{nsim}{number of replicate datasets to simulate. Defaults to \code{1}.}

\item{seed}{an object specifying if and how the random number generator should be 
initialized (‘seeded’). Either NULL or an integer that will be used in a call to set.seed
before simulating the response vectors. If set, the value is saved as the "seed" attribute 
of the returned value. The default, NULL will not change the random generator state, and 
return .Random.seed as the "seed" attribute, see ‘Value’}

\item{...}{additional optional arguments.}
}
\value{
A vector or matrix of \code{nsim} sets of simulated responses
}
\description{
Simulate one or more sets of responses from the distribution corresponding to the fitted model object.
This is a duplicate of the function found in the \code{stats} package.
}
\details{
A \code{simulate} function for \code{mlm} objects, which simulates one or more sets of responses from 
a Multivariate Linear Model (\code{mlm}) object. If multiple sets of responses are requested,
they are returned in a 3D array, with simulation number along the third dimension.
Weights argument is currently ignored -- constant variance-covariance matrix assumed.
}
\examples{

x <- 1:5
mod1 <- lm(c(1:3, 7, 6) ~ x)
S1 <- simulate(mod1, nsim = 4)
## repeat the simulation:
.Random.seed <- attr(S1, "seed")
identical(S1, simulate(mod1, nsim = 4))

S2 <- simulate(mod1, nsim = 200, seed = 101)
rowMeans(S2) # should be about the same as
fitted(mod1)

## repeat identically:
(sseed <- attr(S2, "seed")) # seed; RNGkind as attribute
stopifnot(identical(S2, simulate(mod1, nsim = 200, seed = sseed)))

## To be sure about the proper RNGkind, e.g., after
RNGversion("2.7.0")
## first set the RNG kind, then simulate
do.call(RNGkind, attr(sseed, "kind"))
identical(S2, simulate(mod1, nsim = 200, seed = sseed))

## Binomial GLM examples
yb1 <- matrix(c(4, 4, 5, 7, 8, 6, 6, 5, 3, 2), ncol = 2)
modb1 <- glm(yb1 ~ x, family = binomial)
S3 <- simulate(modb1, nsim = 4)
# each column of S3 is a two-column matrix.

x2 <- sort(runif(100))
yb2 <- rbinom(100, prob = plogis(2*(x2-1)), size = 1)
yb2 <- factor(1 + yb2, labels = c("failure", "success"))
modb2 <- glm(yb2 ~ x2, family = binomial)
S4 <- simulate(modb2, nsim = 4)
# each column of S4 is a factor
data(iris)

}
\author{
David Warton <david.warton@unsw.edu.au>
}
